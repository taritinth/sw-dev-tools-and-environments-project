pipeline {
    agent any
    
    environment{
        JWT_SECRET = '[?m-A9+^/(A5VK]p}gZ_Jr@ZuRa%5:ng'
    }

    stages {
        stage('Pull code') {
            steps {
                checkout scm
            }
        }
        stage('Download dependency') {
            steps {
                sh 'cd frontend && npm install'
            }
        }
        stage('Run unit test') {
            steps {
                dir('./frontend') {
                    sh 'npm run test:unit'
                    publishHTML target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: "./coverage/lcov-report",
                        reportFiles: "index.html",
                        reportName: 'Unit Test Coverage Report'
                    ]

                    publishHTML target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: "./coverage",
                        reportFiles: "report.html",
                        reportName: 'Unit Test Report'
                    ]
                }
            }
        }
        stage('Run component test') {
            steps {
                dir('./frontend') {
                    sh 'npm run test:component'
                    publishHTML target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: "./coverage/lcov-report",
                        reportFiles: "index.html",
                        reportName: 'Component Test Coverage Report'
                    ]

                    publishHTML target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: "./coverage",
                        reportFiles: "report.html",
                        reportName: 'Component Test Report'
                    ]
                }
            }
        }
        stage("Code coverage report") {
            steps {
                clover(cloverReportDir: 'frontend/coverage', cloverReportFileName: 'clover.xml',
                    healthyTarget: [methodCoverage: 70, conditionalCoverage: 80, statementCoverage: 80],
                    unhealthyTarget: [methodCoverage: 50, conditionalCoverage: 50, statementCoverage: 50],
                    failingTarget: [methodCoverage: 0, conditionalCoverage: 0, statementCoverage: 0]
                )
            }
        }
        stage("Build") {
            // agent {
            //     docker { image '808218764127/team-8-frontend:1.0.0' }
            // }
            // steps {
            //     sh 'docker-compose -f docker-compose-build.yml build'
            // }
            steps {
                echo 'Build docker image'
            }
        }
        stage("Deploy:") {
            steps {
                withCredentials([
                    string(credentialsId: 'TEAM8_USERNAME', variable: 'TEAM8_USERNAME'), 
                    string(credentialsId: 'TEAM8_FRONTEND_HOST', variable: 'TEAM8_FRONTEND_HOST'), 
                    string(credentialsId: 'TEAM8_HOST_PASSWORD', variable: 'TEAM8_HOST_PASSWORD')])
                {
                    script{
                        def remote = [:]
                        remote.name = TEAM8_USERNAME
                        remote.host = TEAM8_FRONTEND_HOST
                        remote.user = TEAM8_USERNAME
                        remote.password = TEAM8_HOST_PASSWORD
                        remote.allowAnyHosts = true
                        sshCommand remote: remote, command: "git clone -b main https://github.com/taritinth/sw-dev-tools-and-environments-project.git team-8-frontend"
                        sshCommand remote: remote, command: "docker-compose -f team-8-frontend/docker-compose-build.yml build frontend"
                        sshCommand remote: remote, command: "docker stack deploy --compose-file team-8-frontend/docker-compose-deploy-frontend.yml team-8-frontend"
                        sshCommand remote: remote, command: "rm -r team-8-frontend"
                    }
                }
            }
        }
    }
}