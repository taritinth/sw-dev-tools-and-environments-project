pipeline {
    agent any
    
    environment{
        JWT_SECRET = '[?m-A9+^/(A5VK]p}gZ_Jr@ZuRa%5:ng'
    }

    stages {
        stage('Pull code') {
            steps {
                checkout scm
            }
        }
        stage('Download dependency') {
            steps {
                sh 'cd backend && npm install'
            }
        }
        stage('Run unit test') {
            steps {
                dir('./backend') {
                    sh 'npm run test:db'
                    publishHTML target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: "./coverage",
                        reportFiles: "index.html",
                        reportName: 'Unit Test Coverage Report'
                    ]
                    // publishHTML target: [
                    //     allowMissing: false,
                    //     alwaysLinkToLastBuild: false,
                    //     keepAll: true,
                    //     reportDir: "./coverage",
                    //     reportFiles: "report.html",
                    //     reportName: 'Unit Test Report'
                    // ]
                   
                }
            }
        }
        stage('Run component test') {
            steps {
                dir('./backend') {
                    sh 'npm run test:api'
                    publishHTML target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: "./coverage",
                        reportFiles: "index.html",
                        reportName: 'Component Test Coverage Report'
                    ]
                    // publishHTML target: [
                    //     allowMissing: false,
                    //     alwaysLinkToLastBuild: false,
                    //     keepAll: true,
                    //     reportDir: "./coverage",
                    //     reportFiles: "report.html",
                    //     reportName: 'Component Test Report'
                    // ]
                }
            }
        }
        stage("Code coverage report") {
            steps {
                clover(cloverReportDir: 'backend/coverage', cloverReportFileName: 'clover.xml',
                    healthyTarget: [methodCoverage: 70, conditionalCoverage: 80, statementCoverage: 80],
                    unhealthyTarget: [methodCoverage: 50, conditionalCoverage: 50, statementCoverage: 50],
                    failingTarget: [methodCoverage: 0, conditionalCoverage: 0, statementCoverage: 0]
                )
            }
        }
    }
}
